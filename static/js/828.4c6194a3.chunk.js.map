{"version":3,"file":"static/js/828.4c6194a3.chunk.js","mappings":"qKAAeA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBC,GAAzB,yFACyBC,MAAM,2GAAD,OACiFD,EADjF,+BAD9B,cACQE,EADR,OAKQC,EAAaD,EAASE,OAL9B,kBAOSD,GAPT,kEAUA,I,SAVyB,GAAVJ,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,qDCAAM,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,sGACgCJ,MAC5B,2FAFJ,cACQK,EADR,OAIQC,EAAkBD,EAAgBF,OAJ1C,kBAKSG,GALT,kEAQA,I,WAReF,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,6HCAAG,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA8BC,GAA9B,yFAC+BR,MAAM,sCAAD,OACMQ,EADN,qEADpC,cACQD,EADR,OAKQE,EAAeF,EAAeJ,OALtC,kBAOSM,GAPT,mEAUA,M,SAV8B,GAAfF,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,2BC8Ef,EAtEa,WACX,IAAQG,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,GAAWC,EAAAA,EAAAA,MAEjB,GAA8BC,EAAAA,EAAAA,UAASC,OAAO,IAA9C,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BH,EAAAA,EAAAA,UAAS,MAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAIA,OAFsBP,EAASQ,MAAMC,KAAKC,UAGxC,IAAK,IACH,KACElB,EAAAA,EAAAA,KACGmB,MAAK,YAAkB,IAChBC,EADe,EAAdC,QACsBC,QAC3B,SAAAC,GAAI,OAAIA,EAAKC,QAAUlB,GAAYiB,EAAK5B,OAASW,CAA7C,IAGNO,EAAWF,OAAOS,EAAa,GAAGhB,IACnC,IACAqB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GAGf,CAFC,MAAOA,GACPC,QAAQC,IAAIF,EACb,CACD,MACF,IAAK,WACHhC,EAAAA,EAAAA,GAAUY,GACPa,MAAK,YAAkB,IAChBC,EADe,EAAdC,QACsBC,QAC3B,SAAAC,GAAI,OAAIA,EAAKC,QAAUlB,GAAYiB,EAAK5B,OAASW,CAA7C,IAGNO,EAAWF,OAAOS,EAAa,GAAGhB,IACnC,IACAqB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IAoBlB,IAdAG,EAAAA,EAAAA,YAAU,WACQ,IAAZjB,GAEJT,EAAeS,GACZO,MAAK,SAAAW,GACJ,IAAMC,EAAaD,EAAIE,KAAKV,QAC1B,SAAAW,GAAG,MAAiC,WAA7BA,EAAIC,oBAAR,IAGLnB,EAAWgB,EACZ,IACAN,OAAM,SAAAU,GAAG,OAAIR,QAAQC,IAAIO,EAAhB,GACb,GAAE,CAACvB,IAEAE,EACF,OACE,wBACGA,EAAQsB,KAAI,SAAAC,GAAG,OACd,yBACE,cAAGC,KAAI,4CAAuCD,EAAIjC,GAA3C,YAAiDiC,EAAI1C,MAA5D,UACE,yBACG0C,EAAI1C,KADP,MACgB0C,EAAIE,gBAHfF,EAAIG,QADC,KAWvB,C","sources":["API/findMovie.js","API/trendingMovieFetch.js","API/receiveCredits.js","components/Cast/Cast.jsx"],"sourcesContent":["async function findMovie(name) {\n  const getMovie = await fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=41c0b9645bddc9a823d77ecad6385ef5&language=en-US&query=${name}&page=1&include_adult=true`\n  );\n\n  const parseMovie = getMovie.json();\n\n  return parseMovie;\n}\n\nexport default findMovie;\n","async function TrendingMoviesFetch() {\n  const trendMovieFetch = await fetch(\n    'https://api.themoviedb.org/3/trending/all/week?api_key=41c0b9645bddc9a823d77ecad6385ef5'\n  );\n  const parseTrendMovie = trendMovieFetch.json();\n  return parseTrendMovie;\n}\n\nexport default TrendingMoviesFetch;\n","async function receiveCredits(id) {\n  const receiveCredits = await fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=41c0b9645bddc9a823d77ecad6385ef5&language=en-US`\n  );\n\n  const parseCredits = receiveCredits.json();\n\n  return parseCredits;\n}\n\nexport default receiveCredits;\n","import TrendingMoviesFetch from 'API/trendingMovieFetch';\nimport findMovie from 'API/findMovie';\nimport receiveCredits from 'API/receiveCredits';\n// import getPersonPoster from 'API/getPersonPoster';\n\nimport { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const { moviesId } = useParams();\n  const location = useLocation();\n\n  const [movieId, setMovieId] = useState(Number(0));\n  const [credits, setCredits] = useState(null);\n\n  const checkLocation = location.state.from.pathname;\n\n  switch (checkLocation) {\n    case '/':\n      try {\n        TrendingMoviesFetch()\n          .then(({ results }) => {\n            const findTheMovie = results.filter(\n              echo => echo.title === moviesId || echo.name === moviesId\n            );\n\n            setMovieId(Number(findTheMovie[0].id));\n          })\n          .catch(error => console.log(error));\n      } catch (error) {\n        console.log(error);\n      }\n      break;\n    case '/movies':\n      findMovie(moviesId)\n        .then(({ results }) => {\n          const findTheMovie = results.filter(\n            echo => echo.title === moviesId || echo.name === moviesId\n          );\n\n          setMovieId(Number(findTheMovie[0].id));\n        })\n        .catch(error => console.log(error));\n      break;\n    default:\n      break;\n  }\n\n  useEffect(() => {\n    if (movieId === 0) return;\n\n    receiveCredits(movieId)\n      .then(rej => {\n        const actorsList = rej.cast.filter(\n          act => act.known_for_department === 'Acting'\n        );\n\n        setCredits(actorsList);\n      })\n      .catch(err => console.log(err));\n  }, [movieId]);\n\n  if (credits)\n    return (\n      <ul>\n        {credits.map(tao => (\n          <li key={tao.cast_id}>\n            <a href={`https://www.themoviedb.org/person/${tao.id}-${tao.name}`}>\n              <p>\n                {tao.name} / {tao.character}\n              </p>\n            </a>\n          </li>\n        ))}\n      </ul>\n    );\n};\n\nexport default Cast;\n"],"names":["findMovie","name","fetch","getMovie","parseMovie","json","TrendingMoviesFetch","trendMovieFetch","parseTrendMovie","receiveCredits","id","parseCredits","moviesId","useParams","location","useLocation","useState","Number","movieId","setMovieId","credits","setCredits","state","from","pathname","then","findTheMovie","results","filter","echo","title","catch","error","console","log","useEffect","rej","actorsList","cast","act","known_for_department","err","map","tao","href","character","cast_id"],"sourceRoot":""}